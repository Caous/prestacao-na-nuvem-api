// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOficina.Api.Infrastructure.Context;

#nullable disable

namespace SmartOficina.Api.Infrastructure.Migrations
{
    [DbContext(typeof(OficinaContext))]
    [Migration("20230715020712_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("PrestacaoOrdem")
                .StartsAt(1000L);

            modelBuilder.Entity("SmartOficina.Api.Domain.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cdea58a-e3ab-4f86-bd9c-8689b671005d"),
                            DataCadastro = new DateTime(2023, 7, 15, 2, 7, 11, 882, DateTimeKind.Utc).AddTicks(9655),
                            Email = "testecliente@gmail.com",
                            Nome = "Teste Cliente"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.PrestacaoServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PrestadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR PrestacaoOrdem), 'OS#')");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("PrestacaoServico", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Prestador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Prestador", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("34fe7575-16ce-4bcd-8574-7e5ed368beeb"),
                            DataCadastro = new DateTime(2023, 7, 15, 2, 7, 11, 882, DateTimeKind.Utc).AddTicks(9867),
                            Nome = "Teste Prestador"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("PrestacaoServicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PrestacaoServicoId");

                    b.ToTable("Servico", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Placa")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Veiculo", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.PrestacaoServico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Cliente", "Cliente")
                        .WithMany("Servicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Prestador", "Prestador")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Veiculo", "Veiculo")
                        .WithMany("Servicos")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Prestador");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Servico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.PrestacaoServico", "PrestacaoServico")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestacaoServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrestacaoServico");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Cliente", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.PrestacaoServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Prestador", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Veiculo", b =>
                {
                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
