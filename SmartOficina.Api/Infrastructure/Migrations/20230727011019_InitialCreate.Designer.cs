// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOficina.Api.Infrastructure.Context;

#nullable disable

namespace SmartOficina.Api.Infrastructure.Migrations
{
    [DbContext(typeof(OficinaContext))]
    [Migration("20230727011019_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("PrestacaoOrdem")
                .StartsAt(1000L);

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.CategoriaServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CategoriaServico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2c53a84-591c-4ff6-84e2-ca15102f4c3c"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Serviços na parte de suspensão/geometria",
                            Titulo = "Suspensão"
                        },
                        new
                        {
                            Id = new Guid("5dfb6bc2-e519-47b8-aac3-8840358d4509"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Serviço gerais na parte de motor do veículo",
                            Titulo = "Motor"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddf70c56-46b3-4803-9618-0c18b72347f3"),
                            CPF = "000987565",
                            DataCadastro = new DateTime(2023, 7, 27, 1, 10, 19, 270, DateTimeKind.Utc).AddTicks(8440),
                            Email = "testecliente@gmail.com",
                            Endereco = "Rua Cel Barroso",
                            Nome = "Teste Cliente",
                            RG = "12345677890"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PrestadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR PrestacaoOrdem), 'OS#')");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("VeiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("PrestacaoServico", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Prestador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome_Fantasia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Razao_Social")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Prestador", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("612517ba-1511-443a-b7e8-48688ee0d056"),
                            CNPJ = "000987565987",
                            CPF = "000987565",
                            DataCadastro = new DateTime(2023, 7, 27, 1, 10, 19, 270, DateTimeKind.Utc).AddTicks(8684),
                            Endereco = "Portal Morumbi",
                            Nome = "Teste Prestador",
                            Nome_Fantasia = "Teste Regis",
                            Razao_Social = "Teste Novo",
                            Representante = "Regis"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("PrestacaoServicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubServicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PrestacaoServicoId");

                    b.HasIndex("SubServicoId");

                    b.ToTable("Servico", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("SubServico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("661d0750-179a-4d51-8f1d-9d45bc010a9e"),
                            CategoriaId = new Guid("f2c53a84-591c-4ff6-84e2-ca15102f4c3c"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca da peça",
                            Titulo = "Troca bandeja"
                        },
                        new
                        {
                            Id = new Guid("45f602b4-6984-4844-840e-1e981812411e"),
                            CategoriaId = new Guid("f2c53a84-591c-4ff6-84e2-ca15102f4c3c"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca da peça",
                            Titulo = "Troca Amortecedor"
                        },
                        new
                        {
                            Id = new Guid("6fd9108f-cb00-4d56-963b-98393654d6e4"),
                            CategoriaId = new Guid("5dfb6bc2-e519-47b8-aac3-8840358d4509"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca de todos os pistões",
                            Titulo = "Troca pistão"
                        },
                        new
                        {
                            Id = new Guid("4a4df18a-be7b-4ef1-823a-3efead301206"),
                            CategoriaId = new Guid("5dfb6bc2-e519-47b8-aac3-8840358d4509"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Bloco condenado/Sem retífica, troca por um novo",
                            Titulo = "Troca bloco"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Veiculo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("19422c16-6edd-47b1-bd67-042735f17aa0"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Marca = "Chevrolet",
                            Modelo = "Agile",
                            Placa = "AAA-1234",
                            Tipo = 0
                        },
                        new
                        {
                            Id = new Guid("d3b04b36-ca04-4d93-854a-dcb7178808f6"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Marca = "Hyundai",
                            Modelo = "I30",
                            Placa = "BBB-1234",
                            Tipo = 0
                        },
                        new
                        {
                            Id = new Guid("8ab6d92b-1a4f-407c-af69-e9160979b89a"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Marca = "Chevrolet",
                            Modelo = "Celta",
                            Placa = "CCC-1234",
                            Tipo = 0
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.Cliente", "Cliente")
                        .WithMany("Servicos")
                        .HasForeignKey("ClienteId");

                    b.HasOne("SmartOficina.Api.Domain.Model.Prestador", "Prestador")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Model.Veiculo", "Veiculo")
                        .WithMany("Servicos")
                        .HasForeignKey("VeiculoId");

                    b.Navigation("Cliente");

                    b.Navigation("Prestador");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Servico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.PrestacaoServico", "PrestacaoServico")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestacaoServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Model.SubServico", "SubServico")
                        .WithMany("Servicos")
                        .HasForeignKey("SubServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrestacaoServico");

                    b.Navigation("SubServico");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.CategoriaServico", "Categoria")
                        .WithMany("SubServicos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.CategoriaServico", b =>
                {
                    b.Navigation("SubServicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Cliente", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Prestador", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Veiculo", b =>
                {
                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
