// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOficina.Api.Infrastructure.Context;

#nullable disable

namespace SmartOficina.Api.Infrastructure.Migrations
{
    [DbContext(typeof(OficinaContext))]
    [Migration("20230718003349_AddCategoria")]
    partial class AddCategoria
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("PrestacaoOrdem")
                .StartsAt(1000L);

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.CategoriaServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CategoriaServico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9007d333-ff0c-41df-9518-f5f893652f03"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Serviços na parte de suspensão/geometria",
                            Titulo = "Suspensão"
                        },
                        new
                        {
                            Id = new Guid("21b1de84-b459-41d8-909c-e347af37257e"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Serviço gerais na parte de motor do veículo",
                            Titulo = "Motor"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf5adba5-9753-439f-a584-9defdd1381cc"),
                            DataCadastro = new DateTime(2023, 7, 18, 0, 33, 48, 944, DateTimeKind.Utc).AddTicks(8013),
                            Email = "testecliente@gmail.com",
                            Nome = "Teste Cliente"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PrestadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR PrestacaoOrdem), 'OS#')");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("PrestacaoServico", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Prestador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Prestador", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4a4cc90-6196-4d71-8a53-b9256546b417"),
                            DataCadastro = new DateTime(2023, 7, 18, 0, 33, 48, 944, DateTimeKind.Utc).AddTicks(8195),
                            Nome = "Teste Prestador"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("PrestacaoServicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubServicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PrestacaoServicoId");

                    b.HasIndex("SubServicoId");

                    b.ToTable("Servico", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("SubServico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e61932bf-d005-4737-8f73-76c3ed972f8a"),
                            CategoriaId = new Guid("9007d333-ff0c-41df-9518-f5f893652f03"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca da peça",
                            Titulo = "Troca bandeja"
                        },
                        new
                        {
                            Id = new Guid("fe519082-ce88-4478-b59f-89f907065e5f"),
                            CategoriaId = new Guid("9007d333-ff0c-41df-9518-f5f893652f03"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca da peça",
                            Titulo = "Troca Amortecedor"
                        },
                        new
                        {
                            Id = new Guid("61b38a3e-c2c8-49f0-9fb8-17c5b8c61abc"),
                            CategoriaId = new Guid("21b1de84-b459-41d8-909c-e347af37257e"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca de todos os pistões",
                            Titulo = "Troca pistão"
                        },
                        new
                        {
                            Id = new Guid("86a1333b-f744-450c-8600-b888dc151cc5"),
                            CategoriaId = new Guid("21b1de84-b459-41d8-909c-e347af37257e"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Bloco condenado/Sem retífica, troca por um novo",
                            Titulo = "Troca bloco"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Veiculo", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.Cliente", "Cliente")
                        .WithMany("Servicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Model.Prestador", "Prestador")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Model.Veiculo", "Veiculo")
                        .WithMany("Servicos")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Prestador");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Servico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.PrestacaoServico", "PrestacaoServico")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestacaoServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Model.SubServico", "SubServico")
                        .WithMany("Servicos")
                        .HasForeignKey("SubServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrestacaoServico");

                    b.Navigation("SubServico");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.CategoriaServico", "Categoria")
                        .WithMany("SubServicos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.CategoriaServico", b =>
                {
                    b.Navigation("SubServicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Cliente", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Prestador", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Veiculo", b =>
                {
                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
