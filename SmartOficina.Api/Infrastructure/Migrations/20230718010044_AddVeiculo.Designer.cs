// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOficina.Api.Infrastructure.Context;

#nullable disable

namespace SmartOficina.Api.Infrastructure.Migrations
{
    [DbContext(typeof(OficinaContext))]
    [Migration("20230718010044_AddVeiculo")]
    partial class AddVeiculo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("PrestacaoOrdem")
                .StartsAt(1000L);

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.CategoriaServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CategoriaServico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("27a7b1a7-86d3-4e28-8737-9193d449e1b2"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Serviços na parte de suspensão/geometria",
                            Titulo = "Suspensão"
                        },
                        new
                        {
                            Id = new Guid("b03e8c8c-2abe-425b-bf0d-e517f4595cba"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Serviço gerais na parte de motor do veículo",
                            Titulo = "Motor"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Cliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("899f9291-308d-4a94-b19d-299ee534c0ab"),
                            DataCadastro = new DateTime(2023, 7, 18, 1, 0, 44, 451, DateTimeKind.Utc).AddTicks(7059),
                            Email = "testecliente@gmail.com",
                            Nome = "Teste Cliente"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PrestadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("FORMAT((NEXT VALUE FOR PrestacaoOrdem), 'OS#')");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("PrestacaoServico", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Prestador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Prestador", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("957392ea-2a13-4684-a8af-b69e423d87a8"),
                            DataCadastro = new DateTime(2023, 7, 18, 1, 0, 44, 451, DateTimeKind.Utc).AddTicks(7215),
                            Nome = "Teste Prestador"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("PrestacaoServicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubServicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PrestacaoServicoId");

                    b.HasIndex("SubServicoId");

                    b.ToTable("Servico", (string)null);
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("SubServico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8ffcf58-3ccf-43c0-a2b4-afaf399d809b"),
                            CategoriaId = new Guid("27a7b1a7-86d3-4e28-8737-9193d449e1b2"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca da peça",
                            Titulo = "Troca bandeja"
                        },
                        new
                        {
                            Id = new Guid("7b39de98-16c9-4cf1-8be2-ca78b39ccc37"),
                            CategoriaId = new Guid("27a7b1a7-86d3-4e28-8737-9193d449e1b2"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca da peça",
                            Titulo = "Troca Amortecedor"
                        },
                        new
                        {
                            Id = new Guid("033e7e22-73f8-4573-a35b-ffc222236295"),
                            CategoriaId = new Guid("b03e8c8c-2abe-425b-bf0d-e517f4595cba"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Troca de todos os pistões",
                            Titulo = "Troca pistão"
                        },
                        new
                        {
                            Id = new Guid("019e301b-03d5-46fd-9d78-a9c5ac19f213"),
                            CategoriaId = new Guid("b03e8c8c-2abe-425b-bf0d-e517f4595cba"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Bloco condenado/Sem retífica, troca por um novo",
                            Titulo = "Troca bloco"
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Veiculo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("977c9490-2f3d-429d-a102-09f8317843c2"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Marca = "Chevrolet",
                            Modelo = "Agile",
                            Placa = "AAA-1234",
                            Tipo = 0
                        },
                        new
                        {
                            Id = new Guid("5c4289cf-2578-4bc8-baa1-e1be20943274"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Marca = "Hyundai",
                            Modelo = "I30",
                            Placa = "BBB-1234",
                            Tipo = 0
                        },
                        new
                        {
                            Id = new Guid("cec1b671-de00-482c-8a89-14aeefab8092"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Marca = "Chevrolet",
                            Modelo = "Celta",
                            Placa = "CCC-1234",
                            Tipo = 0
                        });
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.Cliente", "Cliente")
                        .WithMany("Servicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Model.Prestador", "Prestador")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Model.Veiculo", "Veiculo")
                        .WithMany("Servicos")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Prestador");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Servico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.PrestacaoServico", "PrestacaoServico")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestacaoServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOficina.Api.Domain.Model.SubServico", "SubServico")
                        .WithMany("Servicos")
                        .HasForeignKey("SubServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrestacaoServico");

                    b.Navigation("SubServico");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.HasOne("SmartOficina.Api.Domain.Model.CategoriaServico", "Categoria")
                        .WithMany("SubServicos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.CategoriaServico", b =>
                {
                    b.Navigation("SubServicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Cliente", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.PrestacaoServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Prestador", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.SubServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("SmartOficina.Api.Domain.Model.Veiculo", b =>
                {
                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
